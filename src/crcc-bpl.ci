static void
gtk_erg_cell_renderer_color_chooser_init (GtkErgCellRendererColorChooser *crcc)
{
    GtkErgCellRendererColorChooserPrivate   *   priv;
    GtkCellRenderer                         *   cell = GTK_CELL_RENDERER (crcc);

    crcc->priv                      =   gtk_erg_cell_renderer_color_chooser_get_instance_private(crcc);

    priv                            =   crcc->priv;

    priv->a_prop_editable           =   FALSE;
    priv->a_prop_activatable        =   FALSE;
    priv->d_prop_color_rgba_text    =   NULL;

    priv->a_prop_editable_set           =   FALSE;
    priv->a_prop_activatable_set        =   FALSE;
    priv->a_prop_color_rgba_text_set    =   FALSE;

    gtk_cell_renderer_set_alignment (cell, 0.0, 0.5);
    gtk_cell_renderer_set_padding   (cell, 2, 2);
}

static void
gtk_erg_cell_renderer_color_chooser_finalize (GObject *object)
{
    GtkCellRendererText         *   celltext    = GTK_CELL_RENDERER_TEXT (object);
    GtkCellRendererTextPrivate  *   priv        = celltext->priv;

    //g_clear_object (&priv->entry);

    G_OBJECT_CLASS (gtk_erg_cell_renderer_color_chooser_parent_class)->finalize (object);
}

/**
 * gtk_erg_cell_renderer_color_chooser_new:
 *
 * Creates a new #GtkErgCellRendererColorChooser. Adjust how text is drawn using
 * object properties. Object properties can be
 * set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
 * you can bind a property to a value in a #GtkTreeModel. For example,
 * you can bind the “text” property on the cell renderer to a string
 * value in the model, thus rendering a different string in each row
 * of the #GtkTreeView
 *
 * Returns: the new cell renderer
 **/
GtkCellRenderer *
gtk_erg_cell_renderer_color_chooser_new (void)
{
    printf("(crcc)new\n");
    return g_object_new (GTK_TYPE_ERG_CELL_RENDERER_COLOR_CHOOSER, NULL);
}

static void
gtk_erg_cell_renderer_color_chooser_class_init (GtkErgCellRendererColorChooserClass *class)
{
    GObjectClass            *   object_class    =   G_OBJECT_CLASS          (class);
    GtkCellRendererClass    *   cell_class      =   GTK_CELL_RENDERER_CLASS (class);

    object_class->finalize      =   gtk_erg_cell_renderer_color_chooser_finalize;

    object_class->get_property  =   gtk_erg_cell_renderer_color_chooser_get_property;
    object_class->set_property  =   gtk_erg_cell_renderer_color_chooser_set_property;

    cell_class->render                          = gtk_erg_cell_renderer_color_chooser_render;
    cell_class->start_editing                   = gtk_erg_cell_renderer_color_chooser_start_editing;
    cell_class->activate                        = gtk_erg_cell_renderer_color_chooser_activate;
    cell_class->get_preferred_width             = gtk_erg_cell_renderer_color_chooser_get_preferred_width;
    cell_class->get_preferred_height            = gtk_erg_cell_renderer_color_chooser_get_preferred_height;
    cell_class->get_preferred_height_for_width  = gtk_erg_cell_renderer_color_chooser_get_preferred_height_for_width;
    cell_class->get_aligned_area                = gtk_erg_cell_renderer_color_chooser_get_aligned_area;


  Crcc_props[PROP_EDITABLE] =
      g_param_spec_boolean( "editable",
                            P_("Editable"),
                            P_("Whether the text can be modified by the user"),
                            FALSE,
                            GTK_PARAM_READWRITE);

  Crcc_props[PROP_ACTIVATABLE] =
      g_param_spec_boolean( "activatable",
                            P_("Aditable"),
                            P_("Whether the widget can be activated"),
                            FALSE,
                            GTK_PARAM_READWRITE);

  Crcc_props[PROP_COLOR_RGBA] =
      g_param_spec_boxed ("color-rgba",
                          P_("Color as RGBA"),
                          P_("Color as a GdkRGBA"),
                          GDK_TYPE_RGBA,
                          GTK_PARAM_READWRITE);


  Crcc_props[PROP_COLOR_RGBA_TEXT] =
      g_param_spec_string(  "color-rgba-text",
                            P_("Color as RGBA text"),
                            P_("Text representing a GdkRGBA"),
                            NULL,
                            GTK_PARAM_READWRITE);

    // Style props are set or not
    #define ADD_SET_PROP(propname, propval, nick, blurb)                                                                \
        Crcc_props[propval] = g_param_spec_boolean(propname, nick, blurb, FALSE, GTK_PARAM_READWRITE)

    ADD_SET_PROP ("editable-set"        , PROP_EDITABLE_SET         ,
        P_("Editability set")                                       ,
        P_("Whether this tag affects text editability")             );

    ADD_SET_PROP ("activatable-set"     , PROP_ACTIVATABLE_SET      ,
        P_("Activatability set")                                    ,
        P_("Whether this tag affects activatability")               );

    ADD_SET_PROP ("color-rgba-set"      , PROP_COLOR_RGBA_SET       ,
        P_("Color as GdkRGBA set")                                  ,
        P_("...")                                                   );

    ADD_SET_PROP ("color-rgba-text-set" , PROP_COLOR_RGBA_TEXT_SET  ,
        P_("Color as GdkRGBA text")                                 ,
        P_("...")                                                   );

  g_object_class_install_properties (object_class, LAST_PROP, Crcc_props);

  /**
   * GtkErgCellRendererColorChooser::edited:
   * @renderer: the object which received the signal
   * @path: the path identifying the edited cell
   * @new_text: the new text
   *
   * This signal is emitted after @renderer has been edited.
   *
   * It is the responsibility of the application to update the model
   * and store @new_text at the position indicated by @path.
   */
  Crcc_signals [EDITED] =
    g_signal_new (I_("edited"),
		  G_OBJECT_CLASS_TYPE (object_class),
		  G_SIGNAL_RUN_LAST,
		  G_STRUCT_OFFSET (GtkErgCellRendererColorChooserClass, edited),
		  NULL, NULL,
		  custom__marshal_VOID__STRING_STRING,
		  G_TYPE_NONE, 2,
		  G_TYPE_STRING,
		  G_TYPE_STRING);

  //gtk_cell_renderer_class_set_accessible_type (cell_class, GTK_TYPE_TEXT_CELL_ACCESSIBLE);
}

