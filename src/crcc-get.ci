static void
gtk_erg_cell_renderer_color_chooser_get_property (GObject        *object,
				     guint           param_id,
				     GValue         *value,
				     GParamSpec     *pspec)
{
  GtkErgCellRendererColorChooser *celltext = GTK_ERG_CELL_RENDERER_COLOR_CHOOSER (object);
  GtkErgCellRendererColorChooserPrivate *priv = celltext->priv;

  switch (param_id)
    {
    case PROP_TEXT:
      g_value_set_string (value, priv->text);
      break;

    //case PROP_ATTRIBUTES:
    //  g_value_set_boxed (value, priv->extra_attrs);
    //  break;

    //case PROP_SINGLE_PARAGRAPH_MODE:
    //  g_value_set_boolean (value, priv->single_paragraph);
    //  break;

    case PROP_BACKGROUND_GDK:
      {
        GdkColor color;

        color.red = (guint16) (priv->background.red * 65535);
        color.green = (guint16) (priv->background.green * 65535);
        color.blue = (guint16) (priv->background.blue * 65535);

        g_value_set_boxed (value, &color);
      }
      break;

    case PROP_FOREGROUND_GDK:
      {
        GdkColor color;

        color.red = (guint16) (priv->foreground.red * 65535);
        color.green = (guint16) (priv->foreground.green * 65535);
        color.blue = (guint16) (priv->foreground.blue * 65535);

        g_value_set_boxed (value, &color);
      }
      break;

    case PROP_BACKGROUND_RGBA:
      g_value_set_boxed (value, &priv->background);
      break;

    case PROP_FOREGROUND_RGBA:
      g_value_set_boxed (value, &priv->foreground);
      break;

    //case PROP_FONT:
    //    g_value_take_string (value, pango_font_description_to_string (priv->font));
    //  break;

    //case PROP_FONT_DESC:
    //  g_value_set_boxed (value, priv->font);
    //  break;

    //case PROP_FAMILY:
    //  g_value_set_string (value, pango_font_description_get_family (priv->font));
    //  break;

    //case PROP_STYLE:
    //  g_value_set_enum (value, pango_font_description_get_style (priv->font));
    //  break;

    //case PROP_VARIANT:
    //  g_value_set_enum (value, pango_font_description_get_variant (priv->font));
    //  break;

    //case PROP_WEIGHT:
    //  g_value_set_int (value, pango_font_description_get_weight (priv->font));
    //  break;

    //case PROP_STRETCH:
    //  g_value_set_enum (value, pango_font_description_get_stretch (priv->font));
    //  break;

    //case PROP_SIZE:
    //  g_value_set_int (value, pango_font_description_get_size (priv->font));
    //  break;

    //case PROP_SIZE_POINTS:
    //  g_value_set_double (value, ((double)pango_font_description_get_size (priv->font)) / (double)PANGO_SCALE);
    //  break;

    //case PROP_SCALE:
    //  g_value_set_double (value, priv->font_scale);
    //  break;

    //case PROP_EDITABLE:
    //  g_value_set_boolean (value, priv->editable);
    //  break;

    //case PROP_STRIKETHROUGH:
    //  g_value_set_boolean (value, priv->strikethrough);
    //  break;

    //case PROP_UNDERLINE:
    //  g_value_set_enum (value, priv->underline_style);
    //  break;

    //case PROP_RISE:
    //  g_value_set_int (value, priv->rise);
    //  break;

    //case PROP_LANGUAGE:
    //  g_value_set_static_string (value, pango_language_to_string (priv->language));
    //  break;

    //case PROP_ELLIPSIZE:
    //  g_value_set_enum (value, priv->ellipsize);
    //  break;

    //case PROP_WRAP_MODE:
    //  g_value_set_enum (value, priv->wrap_mode);
    //  break;

    //case PROP_WRAP_WIDTH:
      //g_value_set_int (value, priv->wrap_width);
      //break;

    //case PROP_ALIGN:
      //g_value_set_enum (value, priv->align);
      //break;

    case PROP_BACKGROUND_SET:
      g_value_set_boolean (value, priv->background_set);
      break;

    case PROP_FOREGROUND_SET:
      g_value_set_boolean (value, priv->foreground_set);
      break;

    //case PROP_FAMILY_SET:
    //case PROP_STYLE_SET:
    //case PROP_VARIANT_SET:
    //case PROP_WEIGHT_SET:
    //case PROP_STRETCH_SET:
    //case PROP_SIZE_SET:
    //  {
	//PangoFontMask mask = get_property_font_set_mask (param_id);
	//g_value_set_boolean (value, (pango_font_description_get_set_fields (priv->font) & mask) != 0);

	//break;
    //  }

    //case PROP_SCALE_SET:
    //  g_value_set_boolean (value, priv->scale_set);
    //  break;

    case PROP_EDITABLE_SET:
      g_value_set_boolean (value, priv->editable_set);
      break;

    //case PROP_STRIKETHROUGH_SET:
    //  g_value_set_boolean (value, priv->strikethrough_set);
    //  break;

    //case PROP_UNDERLINE_SET:
    //  g_value_set_boolean (value, priv->underline_set);
    //  break;

    //case  PROP_RISE_SET:
    //  g_value_set_boolean (value, priv->rise_set);
    //  break;

    //case PROP_LANGUAGE_SET:
    //  g_value_set_boolean (value, priv->language_set);
    //  break;

    //case PROP_ELLIPSIZE_SET:
    //  g_value_set_boolean (value, priv->ellipsize_set);
    //  break;

    //case PROP_ALIGN_SET:
    //  g_value_set_boolean (value, priv->align_set);
    //  break;

    //case PROP_WIDTH_CHARS:
    //  g_value_set_int (value, priv->width_chars);
    //  break;

    //case PROP_MAX_WIDTH_CHARS:
    //  g_value_set_int (value, priv->max_width_chars);
    //  break;

    //case PROP_PLACEHOLDER_TEXT:
    //  g_value_set_string (value, priv->placeholder_text);
    //  break;

    case PROP_BACKGROUND:
    case PROP_FOREGROUND:
    //case PROP_MARKUP:
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
      break;
    }
}


