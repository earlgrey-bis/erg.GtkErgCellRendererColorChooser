static void
gtk_erg_cell_renderer_color_chooser_class_init (GtkErgCellRendererColorChooserClass *class)
{
    GObjectClass          * object_class    = G_OBJECT_CLASS (class);
    GtkCellRendererClass  * cell_class      = GTK_CELL_RENDERER_CLASS (class);

  object_class->finalize = gtk_erg_cell_renderer_color_chooser_finalize;

  object_class->get_property = gtk_erg_cell_renderer_color_chooser_get_property;
  object_class->set_property = gtk_erg_cell_renderer_color_chooser_set_property;

  cell_class->render = gtk_erg_cell_renderer_color_chooser_render;
  cell_class->start_editing = gtk_erg_cell_renderer_color_chooser_start_editing;
  cell_class->get_preferred_width = gtk_erg_cell_renderer_color_chooser_get_preferred_width;
  cell_class->get_preferred_height = gtk_erg_cell_renderer_color_chooser_get_preferred_height;
  cell_class->get_preferred_height_for_width = gtk_erg_cell_renderer_color_chooser_get_preferred_height_for_width;
  cell_class->get_aligned_area = gtk_erg_cell_renderer_color_chooser_get_aligned_area;

  text_cell_renderer_props[PROP_TEXT] =
      g_param_spec_string ("text",
                           P_("Text"),
                           P_("Text to render"),
                           NULL,
                           GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_MARKUP] =
//      g_param_spec_string ("markup",
//                           P_("Markup"),
//                           P_("Marked up text to render"),
//                           NULL,
//                           GTK_PARAM_WRITABLE);

//  text_cell_renderer_props[PROP_ATTRIBUTES] =
//      g_param_spec_boxed ("attributes",
//                          P_("Attributes"),
//                          P_("A list of style attributes to apply to the text of the renderer"),
//                          PANGO_TYPE_ATTR_LIST,
//                          GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_SINGLE_PARAGRAPH_MODE] =
//      g_param_spec_boolean ("single-paragraph-mode",
//                            P_("Single Paragraph Mode"),
//                            P_("Whether to keep all text in a single paragraph"),
//                            FALSE,
//                            GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  text_cell_renderer_props[PROP_BACKGROUND] =
      g_param_spec_string ("background",
                           P_("Background color name"),
                           P_("Background color as a string"),
                           NULL,
                           GTK_PARAM_WRITABLE);

  /**
   * GtkErgCellRendererColorChooser:background-gdk:
   *
   * Background color as a #GdkColor
   *
   * Deprecated: 3.4: Use #GtkErgCellRendererColorChooser:background-rgba instead.
   */
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
  text_cell_renderer_props[PROP_BACKGROUND_GDK] =
      g_param_spec_boxed ("background-gdk",
                          P_("Background color"),
                          P_("Background color as a GdkColor"),
                          GDK_TYPE_COLOR,
                          GTK_PARAM_READWRITE | G_PARAM_DEPRECATED);
G_GNUC_END_IGNORE_DEPRECATIONS

  /**
   * GtkErgCellRendererColorChooser:background-rgba:
   *
   * Background color as a #GdkRGBA
   *
   * Since: 3.0
   */
  text_cell_renderer_props[PROP_BACKGROUND_RGBA] =
      g_param_spec_boxed ("background-rgba",
                          P_("Background color as RGBA"),
                          P_("Background color as a GdkRGBA"),
                          GDK_TYPE_RGBA,
                          GTK_PARAM_READWRITE);
  text_cell_renderer_props[PROP_FOREGROUND] =
      g_param_spec_string ("foreground",
                           P_("Foreground color name"),
                           P_("Foreground color as a string"),
                           NULL,
                           GTK_PARAM_WRITABLE);

  /**
   * GtkErgCellRendererColorChooser:foreground-gdk:
   *
   * Foreground color as a #GdkColor
   *
   * Deprecated: 3.4: Use #GtkErgCellRendererColorChooser:foreground-rgba instead.
   */
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
  text_cell_renderer_props[PROP_FOREGROUND_GDK] =
      g_param_spec_boxed ("foreground-gdk",
                          P_("Foreground color"),
                          P_("Foreground color as a GdkColor"),
                          GDK_TYPE_COLOR,
                          GTK_PARAM_READWRITE | G_PARAM_DEPRECATED);
G_GNUC_END_IGNORE_DEPRECATIONS

  /**
   * GtkErgCellRendererColorChooser:foreground-rgba:
   *
   * Foreground color as a #GdkRGBA
   *
   * Since: 3.0
   */
  text_cell_renderer_props[PROP_FOREGROUND_RGBA] =
      g_param_spec_boxed ("foreground-rgba",
                          P_("Foreground color as RGBA"),
                          P_("Foreground color as a GdkRGBA"),
                          GDK_TYPE_RGBA,
                          GTK_PARAM_READWRITE);


  text_cell_renderer_props[PROP_EDITABLE] =
      g_param_spec_boolean ("editable",
                            P_("Editable"),
                            P_("Whether the text can be modified by the user"),
                            FALSE,
                            GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_FONT] =
//      g_param_spec_string ("font",
//                           P_("Font"),
//                           P_("Font description as a string, e.g. \"Sans Italic 12\""),
//                           NULL,
//                           GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_FONT_DESC] =
//      g_param_spec_boxed ("font-desc",
//                          P_("Font"),
//                          P_("Font description as a PangoFontDescription struct"),
//                          PANGO_TYPE_FONT_DESCRIPTION,
//                          GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_FAMILY] =
//      g_param_spec_string ("family",
//                           P_("Font family"),
//                           P_("Name of the font family, e.g. Sans, Helvetica, Times, Monospace"),
//                           NULL,
//                           GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_STYLE] =
//      g_param_spec_enum ("style",
//                         P_("Font style"),
//                         P_("Font style"),
//                         PANGO_TYPE_STYLE,
//                         PANGO_STYLE_NORMAL,
//                         GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_VARIANT] =
//      g_param_spec_enum ("variant",
//                         P_("Font variant"),
//                         P_("Font variant"),
//                         PANGO_TYPE_VARIANT,
//                         PANGO_VARIANT_NORMAL,
//                         GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_WEIGHT] =
//      g_param_spec_int ("weight",
//                        P_("Font weight"),
//                        P_("Font weight"),
//                        0, G_MAXINT,
//                        PANGO_WEIGHT_NORMAL,
//                        GTK_PARAM_READWRITE);

//   text_cell_renderer_props[PROP_STRETCH] =
//       g_param_spec_enum ("stretch",
//                          P_("Font stretch"),
//                          P_("Font stretch"),
//                          PANGO_TYPE_STRETCH,
//                          PANGO_STRETCH_NORMAL,
//                          GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_SIZE] =
//      g_param_spec_int ("size",
//                        P_("Font size"),
//                        P_("Font size"),
//                        0, G_MAXINT,
//                        0,
//                        GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_SIZE_POINTS] =
//      g_param_spec_double ("size-points",
//                           P_("Font points"),
//                           P_("Font size in points"),
//                           0.0, G_MAXDOUBLE,
//                           0.0,
//                           GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_SCALE] =
//      g_param_spec_double ("scale",
//                           P_("Font scale"),
//                           P_("Font scaling factor"),
//                           0.0, G_MAXDOUBLE,
//                           1.0,
//                           GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_RISE] =
//      g_param_spec_int ("rise",
//                        P_("Rise"),
//                        P_("Offset of text above the baseline (below the baseline if rise is negative)"),
//                        -G_MAXINT, G_MAXINT,
//                        0,
//                        GTK_PARAM_READWRITE);


//  text_cell_renderer_props[PROP_STRIKETHROUGH] =
//      g_param_spec_boolean ("strikethrough",
//                            P_("Strikethrough"),
//                            P_("Whether to strike through the text"),
//                            FALSE,
//                            GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_UNDERLINE] =
//      g_param_spec_enum ("underline",
//                         P_("Underline"),
//                         P_("Style of underline for this text"),
//                         PANGO_TYPE_UNDERLINE,
//                         PANGO_UNDERLINE_NONE,
//                         GTK_PARAM_READWRITE);

//  text_cell_renderer_props[PROP_LANGUAGE] =
//      g_param_spec_string ("language",
//                           P_("Language"),
//                           P_("The language this text is in, as an ISO code. "
//                              "Pango can use this as a hint when rendering the text. "
//                              "If you don't understand this parameter, you probably don't need it"),
//                           NULL,
//                           GTK_PARAM_READWRITE);

  /**
   * GtkErgCellRendererColorChooser:ellipsize:
   *
   * Specifies the preferred place to ellipsize the string, if the cell renderer
   * does not have enough room to display the entire string. Setting it to
   * %PANGO_ELLIPSIZE_NONE turns off ellipsizing. See the wrap-width property
   * for another way of making the text fit into a given width.
   *
   * Since: 2.6
   */
//  text_cell_renderer_props[PROP_ELLIPSIZE] =
//      g_param_spec_enum ("ellipsize",
//                         P_("Ellipsize"),
//                         P_("The preferred place to ellipsize the string, "
//                            "if the cell renderer does not have enough room "
//                            "to display the entire string"),
//                         PANGO_TYPE_ELLIPSIZE_MODE,
//                         PANGO_ELLIPSIZE_NONE,
//                         GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  /**
   * GtkErgCellRendererColorChooser:width-chars:
   *
   * The desired width of the cell, in characters. If this property is set to
   * -1, the width will be calculated automatically, otherwise the cell will
   * request either 3 characters or the property value, whichever is greater.
   *
   * Since: 2.6
   **/
//  text_cell_renderer_props[PROP_WIDTH_CHARS] =
//      g_param_spec_int ("width-chars",
//                        P_("Width In Characters"),
//                        P_("The desired width of the label, in characters"),
//                        -1, G_MAXINT,
//                        -1,
//                        GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  /**
   * GtkErgCellRendererColorChooser:max-width-chars:
   *
   * The desired maximum width of the cell, in characters. If this property
   * is set to -1, the width will be calculated automatically.
   *
   * For cell renderers that ellipsize or wrap text; this property
   * controls the maximum reported width of the cell. The
   * cell should not receive any greater allocation unless it is
   * set to expand in its #GtkCellLayout and all of the cell's siblings
   * have received their natural width.
   *
   * Since: 3.0
   **/
//  text_cell_renderer_props[PROP_MAX_WIDTH_CHARS] =
//      g_param_spec_int ("max-width-chars",
//                        P_("Maximum Width In Characters"),
//                        P_("The maximum width of the cell, in characters"),
//                        -1, G_MAXINT,
//                        -1,
//                        GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  /**
   * GtkErgCellRendererColorChooser:wrap-mode:
   *
   * Specifies how to break the string into multiple lines, if the cell
   * renderer does not have enough room to display the entire string.
   * This property has no effect unless the wrap-width property is set.
   *
   * Since: 2.8
   */
//  text_cell_renderer_props[PROP_WRAP_MODE] =
//      g_param_spec_enum ("wrap-mode",
//                         P_("Wrap mode"),
//                         P_("How to break the string into multiple lines, "
//                            "if the cell renderer does not have enough room "
//                            "to display the entire string"),
//                         PANGO_TYPE_WRAP_MODE,
//                         PANGO_WRAP_CHAR,
//                         GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  /**
   * GtkErgCellRendererColorChooser:wrap-width:
   *
   * Specifies the minimum width at which the text is wrapped. The wrap-mode property can
   * be used to influence at what character positions the line breaks can be placed.
   * Setting wrap-width to -1 turns wrapping off.
   *
   * Since: 2.8
   */
  //text_cell_renderer_props[PROP_WRAP_WIDTH] =
  //    g_param_spec_int ("wrap-width",
  //                      P_("Wrap width"),
  //                      P_("The width at which the text is wrapped"),
  //                      -1, G_MAXINT,
  //                      -1,
  //                      GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  /**
   * GtkErgCellRendererColorChooser:alignment:
   *
   * Specifies how to align the lines of text with respect to each other.
   *
   * Note that this property describes how to align the lines of text in
   * case there are several of them. The "xalign" property of #GtkCellRenderer,
   * on the other hand, sets the horizontal alignment of the whole text.
   *
   * Since: 2.10
   */
  //text_cell_renderer_props[PROP_ALIGN] =
  //    g_param_spec_enum ("alignment",
  //                       P_("Alignment"),
  //                       P_("How to align the lines"),
  //                       PANGO_TYPE_ALIGNMENT,
  //                       PANGO_ALIGN_LEFT,
  //                       GTK_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY);

  /**
   * GtkErgCellRendererColorChooser:placeholder-text:
   *
   * The text that will be displayed in the #GtkCellRenderer if
   * #GtkErgCellRendererColorChooser:editable is %TRUE and the cell is empty.
   *
   * Since 3.6
   */
  //text_cell_renderer_props[PROP_PLACEHOLDER_TEXT] =
  //    g_param_spec_string ("placeholder-text",
  //                         P_("Placeholder text"),
  //                         P_("Text rendered when an editable cell is empty"),
  //                         NULL,
  //                         GTK_PARAM_READWRITE);

  /* Style props are set or not */

#define ADD_SET_PROP(propname, propval, nick, blurb) text_cell_renderer_props[propval] = g_param_spec_boolean (propname, nick, blurb, FALSE, GTK_PARAM_READWRITE)

  ADD_SET_PROP ("background-set", PROP_BACKGROUND_SET,
                P_("Background set"),
                P_("Whether this tag affects the background color"));

  ADD_SET_PROP ("foreground-set", PROP_FOREGROUND_SET,
                P_("Foreground set"),
                P_("Whether this tag affects the foreground color"));

  //ADD_SET_PROP ("editable-set", PROP_EDITABLE_SET,
  //              P_("Editability set"),
  //              P_("Whether this tag affects text editability"));

  //ADD_SET_PROP ("family-set", PROP_FAMILY_SET,
  //              P_("Font family set"),
  //              P_("Whether this tag affects the font family"));

  //ADD_SET_PROP ("style-set", PROP_STYLE_SET,
  //              P_("Font style set"),
  //              P_("Whether this tag affects the font style"));

  //ADD_SET_PROP ("variant-set", PROP_VARIANT_SET,
  //              P_("Font variant set"),
  //              P_("Whether this tag affects the font variant"));

  //ADD_SET_PROP ("weight-set", PROP_WEIGHT_SET,
  //              P_("Font weight set"),
  //              P_("Whether this tag affects the font weight"));

  //ADD_SET_PROP ("stretch-set", PROP_STRETCH_SET,
  //              P_("Font stretch set"),
  //             P_("Whether this tag affects the font stretch"));

  //ADD_SET_PROP ("size-set", PROP_SIZE_SET,
  //              P_("Font size set"),
  //             P_("Whether this tag affects the font size"));

  //ADD_SET_PROP ("scale-set", PROP_SCALE_SET,
  //              P_("Font scale set"),
  //              P_("Whether this tag scales the font size by a factor"));

  //ADD_SET_PROP ("rise-set", PROP_RISE_SET,
  //              P_("Rise set"),
  //              P_("Whether this tag affects the rise"));

  //ADD_SET_PROP ("strikethrough-set", PROP_STRIKETHROUGH_SET,
  //              P_("Strikethrough set"),
  //              P_("Whether this tag affects strikethrough"));

  //ADD_SET_PROP ("underline-set", PROP_UNDERLINE_SET,
  //              P_("Underline set"),
  //              P_("Whether this tag affects underlining"));

  //ADD_SET_PROP ("language-set", PROP_LANGUAGE_SET,
  //              P_("Language set"),
  //              P_("Whether this tag affects the language the text is rendered as"));

  //ADD_SET_PROP ("ellipsize-set", PROP_ELLIPSIZE_SET,
  //              P_("Ellipsize set"),
  //              P_("Whether this tag affects the ellipsize mode"));

  //ADD_SET_PROP ("align-set", PROP_ALIGN_SET,
  //              P_("Align set"),
  //              P_("Whether this tag affects the alignment mode"));

  g_object_class_install_properties (object_class, LAST_PROP, text_cell_renderer_props);

  /**
   * GtkErgCellRendererColorChooser::edited:
   * @renderer: the object which received the signal
   * @path: the path identifying the edited cell
   * @new_text: the new text
   *
   * This signal is emitted after @renderer has been edited.
   *
   * It is the responsibility of the application to update the model
   * and store @new_text at the position indicated by @path.
   */
  text_cell_renderer_signals [EDITED] =
    g_signal_new (I_("edited"),
		  G_OBJECT_CLASS_TYPE (object_class),
		  G_SIGNAL_RUN_LAST,
		  G_STRUCT_OFFSET (GtkErgCellRendererColorChooserClass, edited),
		  NULL, NULL,
		  g_cclosure_marshal_VOID__STRING,//_gtk_marshal_VOID__STRING_STRING,
		  G_TYPE_NONE, 2,
		  G_TYPE_STRING,
		  G_TYPE_STRING);

  //gtk_cell_renderer_class_set_accessible_type (cell_class, GTK_TYPE_TEXT_CELL_ACCESSIBLE);
}

