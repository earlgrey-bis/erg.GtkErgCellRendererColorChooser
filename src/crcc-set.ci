static void
gtk_erg_cell_renderer_color_chooser_set_property (
    GObject         *   object      ,
    guint               param_id    ,
    const GValue    *   value       ,
    GParamSpec      *   pspec       )
{
    GtkErgCellRendererColorChooser          *   crcc    =   GTK_ERG_CELL_RENDERER_COLOR_CHOOSER(object);
    GtkErgCellRendererColorChooserPrivate   *   priv    =   crcc->priv;

    switch (param_id)
    {

    //  ............................................................................................
    case PROP_EDITABLE:
    priv->a_prop_editable           =   g_value_get_boolean (value);
    priv->a_prop_editable_set       =   TRUE;

    priv->a_prop_activatable        =   FALSE;
    priv->a_prop_activatable_set    =   TRUE;

    if (priv->a_prop_editable)
        g_object_set (crcc, "mode", GTK_CELL_RENDERER_MODE_EDITABLE, NULL);
    else
        g_object_set (crcc, "mode", GTK_CELL_RENDERER_MODE_INERT, NULL);

    g_object_notify_by_pspec (object, Crcc_props[PROP_EDITABLE_SET]);
    g_object_notify_by_pspec (object, Crcc_props[PROP_ACTIVATABLE_SET]);
    break;
    //  ............................................................................................
    case PROP_ACTIVATABLE:

    // printf("Set:ACTIVATABLE\n");

    priv->a_prop_activatable        =   g_value_get_boolean (value);
    priv->a_prop_activatable_set    =   TRUE;

    priv->a_prop_editable           =   FALSE;
    priv->a_prop_editable_set       =   TRUE;

    if (priv->a_prop_activatable)
        g_object_set(crcc, "mode", GTK_CELL_RENDERER_MODE_ACTIVATABLE, NULL);
    else
        g_object_set(crcc, "mode", GTK_CELL_RENDERER_MODE_INERT, NULL);


    g_object_notify_by_pspec (object, Crcc_props[PROP_EDITABLE_SET]);
    g_object_notify_by_pspec (object, Crcc_props[PROP_ACTIVATABLE_SET]);
    break;
    //  ............................................................................................
    case PROP_COLOR_RGBA:
    priv->a_prop_color_rgba_set         = TRUE;
    priv->a_prop_color_rgba_text_set    = TRUE;

    priv->a_prop_color_rgba = *( (GdkRGBA*)g_value_get_boxed(value) );                              // struct copy

    if ( priv->d_prop_color_rgba_text ) g_free (priv->d_prop_color_rgba_text);
    priv->d_prop_color_rgba_text = gdk_rgba_to_string(&priv->a_prop_color_rgba);

    g_object_notify_by_pspec (object, Crcc_props[PROP_COLOR_RGBA_SET]);
    g_object_notify_by_pspec (object, Crcc_props[PROP_COLOR_RGBA_TEXT_SET]);

    //set_bg_color (celltext, g_value_get_boxed (value));

    //  NULL rgba not allowed for us
    //if (rgba)
    //{
        //if (!priv->background_set)
        //{
            //priv->background_set = TRUE;
            //g_object_notify_by_pspec (G_OBJECT (celltext), Crcc_props[PROP_BACKGROUND_SET]);
        //}

        //priv->background = *rgba;
    //}
    //else
    //{
    //    if (priv->background_set)
    //    {
    //        priv->background_set = FALSE;
    //        g_object_notify_by_pspec (G_OBJECT (celltext), Crcc_props[PROP_BACKGROUND_SET]);
    //    }
    //}
    break;
    //  ............................................................................................
    case PROP_COLOR_RGBA_TEXT:

    //printf("property_set:PROP_COLOR_RGBA_TEXT\n");

    priv->a_prop_color_rgba_set         = TRUE;
    priv->a_prop_color_rgba_text_set    = TRUE;

    if ( priv->d_prop_color_rgba_text ) g_free (priv->d_prop_color_rgba_text);
    priv->d_prop_color_rgba_text = g_value_dup_string (value);

    if ( g_value_get_string(value) )                                                                // ex:empty GtkTreeModel
    {
        gdk_rgba_parse(&priv->a_prop_color_rgba, priv->d_prop_color_rgba_text);
    }
    else
    {
        priv->a_prop_color_rgba.red     =   0.85;
        priv->a_prop_color_rgba.green   =   0.85;
        priv->a_prop_color_rgba.blue    =   0.85;
        priv->a_prop_color_rgba.alpha   =   0.50;
    }

    //g_object_notify_by_pspec (object, pspec);                                                     // less didactic
    g_object_notify_by_pspec (object, Crcc_props[PROP_COLOR_RGBA_SET]);
    g_object_notify_by_pspec (object, Crcc_props[PROP_COLOR_RGBA_TEXT_SET]);
    break;
    //  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    case PROP_EDITABLE_SET:
    priv->a_prop_editable_set = g_value_get_boolean (value);
    break;
    //  ............................................................................................
    case PROP_ACTIVATABLE_SET:
    priv->a_prop_activatable_set = g_value_get_boolean (value);
    break;
    //  ............................................................................................
    case PROP_COLOR_RGBA_SET:
    priv->a_prop_color_rgba_set = g_value_get_boolean (value);
    break;
    //  ............................................................................................
    case PROP_COLOR_RGBA_TEXT_SET:
    priv->a_prop_color_rgba_text_set = g_value_get_boolean (value);
    break;
    //  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    default:
    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
    break;
    }
}
