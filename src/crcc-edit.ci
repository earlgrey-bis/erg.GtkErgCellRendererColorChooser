/*
static void
gtk_erg_cell_renderer_color_chooser_editing_done (GtkCellEditable *entry,
				     gpointer         data)
{
  GtkErgCellRendererColorChooserPrivate *priv;
  const gchar *path;
  const gchar *new_text;
  gboolean canceled;

    printf("(crcc)editing done\n");


  priv = GTK_ERG_CELL_RENDERER_COLOR_CHOOSER (data)->priv;

  g_clear_object (&priv->entry);

  if (priv->focus_out_id > 0)
    {
      g_signal_handler_disconnect (entry, priv->focus_out_id);
      priv->focus_out_id = 0;
    }

  if (priv->populate_popup_id > 0)
    {
      g_signal_handler_disconnect (entry, priv->populate_popup_id);
      priv->populate_popup_id = 0;
    }

  if (priv->entry_menu_popdown_timeout)
    {
      g_source_remove (priv->entry_menu_popdown_timeout);
      priv->entry_menu_popdown_timeout = 0;
    }

  g_object_get (entry,
                "editing-canceled", &canceled,
                NULL);
  gtk_cell_renderer_stop_editing (GTK_CELL_RENDERER (data), canceled);

  if (canceled)
    return;

  path = g_object_get_data (G_OBJECT (entry), GTK_ERG_CELL_RENDERER_COLOR_CHOOSER_PATH);
  new_text = gtk_entry_get_text (GTK_ENTRY (entry));

  g_signal_emit (data, Crcc_signals[EDITED], 0, path, new_text);
}

static gboolean
gtk_erg_cell_renderer_color_chooser_focus_out_event (GtkWidget *entry,
		                        GdkEvent  *event,
					gpointer   data)
{
  GtkErgCellRendererColorChooserPrivate *priv;

    printf("(crcc)focus out\n");


  priv = GTK_ERG_CELL_RENDERER_COLOR_CHOOSER (data)->priv;

  if (priv->in_entry_menu)
    return FALSE;

  g_object_set (entry,
                "editing-canceled", TRUE,
                NULL);
  gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (entry));
  gtk_cell_editable_remove_widget (GTK_CELL_EDITABLE (entry));

  // entry needs focus-out-event
  return FALSE;
}
*/
static GtkCellEditable *
gtk_erg_cell_renderer_color_chooser_start_editing(
    GtkCellRenderer         *   cell,
    GdkEvent                *   event,
    GtkWidget               *   widget,
    const gchar             *   path,
    const GdkRectangle      *   background_area,
    const GdkRectangle      *   cell_area,
    GtkCellRendererState        flags)
{
    GtkErgCellRendererColorChooser          *   crcc;
    GtkErgCellRendererColorChooserPrivate   *   priv;
    gfloat                                      xalign, yalign;

    printf("(crcc)start editing\n");

    crcc    =   GTK_ERG_CELL_RENDERER_COLOR_CHOOSER (cell);
    priv    =   crcc->priv;

    // If the cell isn't editable we return NULL.
    //if (priv->editable == FALSE)
    return NULL;
    /*
  gtk_cell_renderer_get_alignment (cell, &xalign, &yalign);

  priv->entry = gtk_entry_new ();
  g_object_ref_sink (G_OBJECT (priv->entry));

  gtk_entry_set_has_frame (GTK_ENTRY (priv->entry), FALSE);
  gtk_entry_set_alignment (GTK_ENTRY (priv->entry), xalign);
  gtk_entry_set_width_chars (GTK_ENTRY (priv->entry), 5);

  if (priv->text)
    gtk_entry_set_text (GTK_ENTRY (priv->entry), priv->text);
  g_object_set_data_full (G_OBJECT (priv->entry), I_(GTK_ERG_CELL_RENDERER_COLOR_CHOOSER_PATH), g_strdup (path), g_free);

  gtk_editable_select_region (GTK_EDITABLE (priv->entry), 0, -1);

  priv->in_entry_menu = FALSE;
  if (priv->entry_menu_popdown_timeout)
    {
      g_source_remove (priv->entry_menu_popdown_timeout);
      priv->entry_menu_popdown_timeout = 0;
    }

  g_signal_connect (priv->entry,
		    "editing-done",
		    G_CALLBACK (gtk_erg_cell_renderer_color_chooser_editing_done),
		    celltext);
  priv->focus_out_id = g_signal_connect_after (priv->entry, "focus-out-event",
					       G_CALLBACK (gtk_erg_cell_renderer_color_chooser_focus_out_event),
					       celltext);
  priv->populate_popup_id =
    g_signal_connect (priv->entry, "populate-popup",
                      G_CALLBACK (gtk_erg_cell_renderer_color_chooser_populate_popup),
                      celltext);

  gtk_widget_show (priv->entry);

  return GTK_CELL_EDITABLE (priv->entry);
    */
}

static  gboolean
gtk_erg_cell_renderer_color_chooser_activate(
    GtkCellRenderer         *   crdr            ,
    GdkEvent                *   event           ,
    GtkWidget               *   widget          ,
    const gchar             *   path            ,
    const GdkRectangle      *   background_area ,
    const GdkRectangle      *   cell_area       ,
    GtkCellRendererState        flags           )
{
    GtkErgCellRendererColorChooser          *   crcc            =   NULL;
    GtkErgCellRendererColorChooserPrivate   *   priv            =   NULL;
    GdkRGBA                                     color;
    gchar                                   *   scolor          =   NULL;
    gchar                                   *   spath           =   NULL;
    //  ............................................................................................
    //printf("(crcc)activate:[%s]\n", path);

    crcc    =   GTK_ERG_CELL_RENDERER_COLOR_CHOOSER(crdr);
    priv    =   crcc->priv;

    if ( ! priv->a_prop_active )
        return TRUE;

    spath   =   g_strdup(path);                                                                     // TEK-001

    GtkWidget * dlg = gtk_color_chooser_dialog_new(
        "Choose color",
        NULL);
    g_object_ref_sink( dlg );

    gint r = gtk_dialog_run( GTK_DIALOG(dlg) );

    if ( r == GTK_RESPONSE_OK )
    {
        printf("->ok\n");
        gtk_color_chooser_get_rgba(GTK_COLOR_CHOOSER(dlg), &(color));
        //scolor = gdk_rgba_to_string(&(color));
        scolor = gdk_rgba_to_string_sharp6d( &color );
    }

    gtk_widget_destroy(dlg);

    if ( r == GTK_RESPONSE_OK )
    {
        g_signal_emit(crcc, Crcc_signals[COLOR_PICKED], 0, spath, scolor);
    }

    g_free(spath);
    g_free(scolor);

    return TRUE;                                                                                    // TRUE if the event was consumed/handled
}
